import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { rickAndMortyApi } from '../services/rickAndMortyApi';

// TODO : Clean up this slice
const initialState = {
    page: 1,
    status: 'idle',
    characters: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllCharacters = createAsyncThunk(
    'rickAndMorty/fetchAllCharacters',
    async () => {
        const response = await rickAndMortyApi.endpoints.getAllCharacters();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const rickAndMortySlice = createSlice({
    name: 'app',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setPage: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.page = action.payload;
        },
        setAllCharacters: (state, action) => {
            if (state.characters !== action.payload && action.payload?.length)
                action.payload.forEach((character) =>
                    state.characters.push(character)
                );
        },
        clearCharacters: (state, action) => {
            state.characters = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(fetchAllCharacters.pending, (state) => {
    //             state.status = 'loading';
    //         })
    //         .addCase(fetchAllCharacters.fulfilled, (state, action) => {
    //             state.status = 'idle';
    //             state.characters = action.payload;
    //         });
    // },
});

export const { setPage, setAllCharacters, clearCharacters } = rickAndMortySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const currentPage = (state) => state.app.page;
export const selectAllCharacters = (state) => state.app.characters;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };
export default rickAndMortySlice.reducer;